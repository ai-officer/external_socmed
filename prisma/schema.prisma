generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String?
  password      String
  role          Role            @default(USER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  files         File[]
  folders       Folder[]
  savedSearches SavedSearch[]
  searchHistory SearchHistory[]
  tags          Tag[]

  @@map("users")
}

model Folder {
  id          String   @id @default(cuid())
  name        String
  description String?
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  files       File[]
  parent      Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  children    Folder[] @relation("FolderHierarchy")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([parentId])
  @@map("folders")
}

model File {
  id            String    @id @default(cuid())
  filename      String
  originalName  String
  mimeType      String
  size          Int
  cloudinaryId  String    @unique
  cloudinaryUrl String
  description   String?
  deletedAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  folderId      String?
  userId        String
  tags          FileTag[]
  folder        Folder?   @relation(fields: [folderId], references: [id])
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([folderId])
  @@index([mimeType])
  @@index([deletedAt])
  @@map("files")
}

model Tag {
  id          String    @id @default(cuid())
  name        String
  color       String    @default("#3B82F6")
  description String?
  createdAt   DateTime  @default(now())
  userId      String
  files       FileTag[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
  @@index([userId])
  @@map("tags")
}

model FileTag {
  fileId String
  tagId  String
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([fileId, tagId])
  @@map("file_tags")
}

model SearchHistory {
  id           String   @id @default(cuid())
  query        String
  filters      String?
  resultsCount Int      @default(0)
  createdAt    DateTime @default(now())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@map("search_history")
}

model SavedSearch {
  id          String   @id @default(cuid())
  name        String
  description String?
  query       String
  filters     String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("saved_searches")
}

enum Role {
  ADMIN
  USER
}
